<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on dengxiujun</title>
    <link>https://dengxiujun.github.io/posts/</link>
    <description>Recent content in Posts on dengxiujun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Mar 2019 14:43:22 +0800</lastBuildDate>
    
	<atom:link href="https://dengxiujun.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DevOps 简介</title>
      <link>https://dengxiujun.github.io/posts/devops_introduction/</link>
      <pubDate>Fri, 29 Mar 2019 14:43:22 +0800</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/devops_introduction/</guid>
      <description>目标  打造通用, 稳定, 快速, 易于扩展的部署流水线  部署流水线是指软件从版本控制库到用户手中这一过程的自动化表现形式。对软件的每次变更都会经历这样一个自动化的过程 部署流水线包含代码检查, 持续集成, 持续部署, 自动化测试等各个环节  构建自助平台  各项目组可一键创建测试所以需要的容器化Java环境, 数据库等. 并可通过自助平台进行管理 通过自助平台配置自动构建行为 集成日志查看功能   参考示例 零件俱乐部项目的部署流程如下图所示, 开发人员无需关心部署的细节, 只需要推送代码到对应的分支, 就会触发部署流水线部署到相应的环境.
 开发人员使用特性分支的git分支模型来开发新功能, 代码需要推送到GitLab仓库 GitLab根据代码仓库中的gitlab-ci.yaml文件来, 触发GitLab CI执行 编译-&amp;gt;测试-&amp;gt;发布镜像-&amp;gt;部署 流水线  特定的处理环节(比如多个feature分支的自动合并, 版本号的确定) 采用Shell或者Python脚本来实现 Java代码的构建会用到Gradle, js代码的构建会用到npm或yarn 执行单元测试, 如果测试失败会终止构建, 并使用邮件通知给本次构建的触发者 编译完成之后从代码仓库中获取Dockerfile文件, 然后使用Docker制作成镜像文件  发布到Harbor, harbor是docker镜像的仓库, 基于官方的Registry 通过kubectl触发Kubernetes执行发布流程 k8s拉取指定镜像, 进行滚动升级  书单 DevOps方法论  《凤凰项目：一个IT运维的传奇故事》 以小说的方式，讲述了一个凌乱的无可救药的运维项目组是如何一步步达成最后高效且舒心的工作状态。
 《DevOps实践指南》 《凤凰项目：一个IT运维的传奇故事》 的姊妹篇， 涵盖了DevOps的横向知识，可以当工具书读。
 《持续交付》
 《Effective DevOps》</description>
    </item>
    
    <item>
      <title>Hugo coder wiki</title>
      <link>https://dengxiujun.github.io/posts/hugo-coder-wiki/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/hugo-coder-wiki/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Theme Demo</title>
      <link>https://dengxiujun.github.io/posts/theme-demo/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/theme-demo/</guid>
      <description>Style Demo h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading This is bold text
This is bold text
This is italic text
This is italic text
Deleted text
This is text with inline math $\sum_{n=1}^{\infty} 2^{-n} = 1$ and with math blocks:
$$ \sum_{n=1}^{\infty} 2^{-n} = 1 $$
   Heading Another heading     text text   text text   text text     Block quotes are written like so.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://dengxiujun.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://dengxiujun.github.io/posts/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://dengxiujun.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://dengxiujun.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dengxiujun.github.io/posts/migrate-from-jekyll/</guid>
      <description>Table of Contents  Move static content to static Create your Hugo configuration file Set your configuration publish folder to site Convert Jekyll templates to Hugo templates Convert Jekyll plugins to Hugo shortcodes  Implementation Usage  Finishing Touches  Fix Content Clean Up  A practical example in a diff  Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output.</description>
    </item>
    
  </channel>
</rss>